---
- name: Build and deploy app stack
  hosts: all
  gather_facts: false
  vars:
    # app
    # project_name
    # project_folder
    - app_split: '{{ app | urlsplit }}'
    - repo_version: 'HEAD'
    - repo_key: ''
    - dest_folder: /tmp/
    
  tasks:

    - name: 'Setting project_name '
      ansible.builtin.set_fact:
        project_name: "{{ app_split.path | basename | splitext | first }}"
      when: project_name is not defined

    - name: 'Setting project_folder'
      ansible.builtin.set_fact:
        project_folder: '{{ dest_folder }}{{ project_name }}/'

    - name: 'Cloning {{ app }} into {{ project_folder }}'
      ansible.builtin.git:
        repo: '{{ app }}'
        version: '{{ repo_version }}'
        key_file: '{{ repo_key }}'
        accept_hostkey: true
        dest: '{{ project_folder }}'
        umask: '0077'
        force: true
      register: clone_result
      until: clone_result is not failed
      retries: 3
      delay: 3
      when: app_split.scheme != ""

    - name: 'Copying {{ app }} into {{ dest_folder }}'
      ansible.builtin.copy:
        src: '{{ app }}'
        dest: '{{ dest_folder }}'
        mode: '0700'
        force: false
      when: clone_result is skipped

    - name: 'Registering .env variables'
      ansible.builtin.command:
        chdir: '{{ project_folder }}'
        argv:
        - python3
        - -c
        - import dotenv; print(dotenv.dotenv_values())
      register: dotenv

    - name: 'Building image from Dockerfile'
      community.general.docker_image:
        name: '{{ (dotenv.stdout | from_yaml).NAME }}'
        tag: '{{ (dotenv.stdout | from_yaml).VERSION }}'
        source: build
        force_source: true
        build:
          path: '{{ project_folder }}'
          pull: true
        state: present
      ignore_errors: true

    - name: 'Deploying stack from docker-compose.yml'
      community.general.docker_stack:
        name: '{{ project_name }}'
        compose: '{{ project_folder }}docker-compose.yml'
        state: present
      environment: '{{ dotenv.stdout }}'

    - name: 'Removing git repository'
      ansible.builtin.file:
        path: '{{ project_folder }}'
        state: absent
      when: clone_result is not skipped
    